<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FailsWithNegativeAmount_TestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @SourceAccount INT = 95532;
DECLARE @DestAccount INT = 95533;

DECLARE @RC INT
DECLARE @TransferId BIGINT

BEGIN TRAN

BEGIN TRY
	EXEC @RC = Banking.CreateTransfer @SourceAccount, @DestAccount, 'Desc', -10, @TransferId OUTPUT;
END TRY
BEGIN CATCH
	IF ERROR_NUMBER() = 51005
	BEGIN
		SELECT 0
		RETURN
	END

	SELECT ERROR_MESSAGE();
	SELECT ERROR_NUMBER();
END CATCH

IF @@TRANCOUNT &gt; 0
	ROLLBACK TRAN

SELECT 'RC = ' + CONVERT(VARCHAR, @RC);
</value>
  </data>
  <data name="Success_TestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @SourceAccount INT = 1342532;
DECLARE @DestAccount INT = 1342533;

DECLARE @RC INT
DECLARE @TransferId BIGINT

EXEC @RC = Banking.CreateTransfer @SourceAccount, @DestAccount, 'Desc', 10, @TransferId OUTPUT;

IF @RC = 0 -- Success
BEGIN
	IF @TransferId IS NOT NULL
	BEGIN
		SELECT 0
		RETURN
	END
END

SELECT 'Returned ' + CONVERT(VARCHAR, @RC);
</value>
  </data>
  <data name="FailsWithUnknownSourceAccount_TestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @SourceAccount INT = 4000; -- Unknown
DECLARE @DestAccount INT = 3003;

DECLARE @RC INT
DECLARE @TransferId BIGINT

BEGIN TRAN

BEGIN TRY
	EXEC @RC = Banking.CreateTransfer @SourceAccount, @DestAccount, 'Desc', 10, @TransferId OUTPUT;
END TRY
BEGIN CATCH
	IF ERROR_NUMBER() = 50000 AND CHARINDEX('51001', ERROR_MESSAGE()) &gt; 0
		SELECT 0
	ELSE
	BEGIN
		SELECT ERROR_MESSAGE()
		SELECT ERROR_NUMBER()
	END
END CATCH

IF @@TRANCOUNT &gt; 0
	ROLLBACK TRAN

SELECT 'RC = ' + CONVERT(VARCHAR, @RC);
</value>
  </data>
  <data name="FailsWithUnknownDestAccount_TestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @SourceAccount INT = 3002; -- Unknown
DECLARE @DestAccount INT = 4000;

DECLARE @RC INT
DECLARE @TransferId BIGINT

BEGIN TRAN

BEGIN TRY
	EXEC @RC = Banking.CreateTransfer @SourceAccount, @DestAccount, 'Desc', 10, @TransferId OUTPUT;
END TRY
BEGIN CATCH
	IF ERROR_NUMBER() = 50000 AND CHARINDEX('51002', ERROR_MESSAGE()) &gt; 0
		SELECT 0
	ELSE
	BEGIN
		SELECT ERROR_MESSAGE()
		SELECT ERROR_NUMBER()
	END
END CATCH

IF @@TRANCOUNT &gt; 0
	ROLLBACK TRAN

SELECT 'RC = ' + CONVERT(VARCHAR, @RC);
</value>
  </data>
  <data name="FailsWithDifferentAccountCurrencies_TestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @RC INT
DECLARE @TransferId BIGINT

BEGIN TRAN

BEGIN TRY
	EXEC @RC = Banking.CreateTransfer 3002, 3003, 'Desc', 10, @TransferId OUTPUT;
END TRY
BEGIN CATCH
	-- Cannot detect specific error number (51008) because of rethrow.
	IF ERROR_NUMBER() = 50000 AND CHARINDEX('51008', CONVERT(VARCHAR, ERROR_MESSAGE())) &gt; 0
	BEGIN
		SELECT 0
		RETURN
	END

	SELECT ERROR_NUMBER();
END CATCH

IF @@TRANCOUNT &gt; 0
	ROLLBACK TRAN

SELECT 'Return code ' + CONVERT(VARCHAR, @RC);</value>
  </data>
  <data name="FailsWithNullDescription_TestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @SourceAccount INT = 934532;
DECLARE @DestAccount INT = 934533;

DECLARE @RC INT
DECLARE @TransferId BIGINT

BEGIN TRY
	EXEC @RC = Banking.CreateTransfer @SourceAccount, @DestAccount, null, 10, @TransferId OUTPUT;
END TRY
BEGIN CATCH
	IF ERROR_NUMBER() = 51003
	BEGIN
		SELECT 0
		RETURN
	END
END CATCH
</value>
  </data>
  <data name="FailsWithDifferentAccountCurrencies_PretestAction.SqlScript" xml:space="preserve">
    <value>SET IDENTITY_INSERT dbo.[User] ON
INSERT INTO dbo.[User] (UserId, Email, PasswordHash, PasswordSalt) VALUES (3001, 'user@domain.com', 'hash', 'salt');
SET IDENTITY_INSERT dbo.[User] OFF

SET IDENTITY_INSERT Banking.[Account] ON
INSERT INTO Banking.[Account] (AccountId, CurrencyId, AllowNegative, [Type]) VALUES (3002, 'USD', 1, 'Current');
INSERT INTO Banking.[Account] (AccountId, CurrencyId, AllowNegative, [Type]) VALUES (3003, 'BTC', 1, 'Current');

SET IDENTITY_INSERT Banking.[Account] OFF

</value>
  </data>
  <data name="FailsWithNegativeAmount_PretestAction.SqlScript" xml:space="preserve">
    <value>SET IDENTITY_INSERT dbo.[User] ON
INSERT INTO dbo.[User] (UserId, Email, PasswordHash, PasswordSalt) VALUES (95737, 'z48597345@domain.com', 'hash', 'salt');
SET IDENTITY_INSERT dbo.[User] OFF

SET IDENTITY_INSERT Banking.[Account] ON
INSERT INTO Banking.[Account] (AccountId, CurrencyId, AllowNegative, [Type]) VALUES (95532, 'USD', 0, 'Current');
INSERT INTO Banking.[Account] (AccountId, CurrencyId, AllowNegative, [Type]) VALUES (95533, 'USD', 0, 'Current');

SET IDENTITY_INSERT Banking.[Account] OFF

</value>
  </data>
  <data name="FailsWithNullDescription_PretestAction.SqlScript" xml:space="preserve">
    <value>SET IDENTITY_INSERT dbo.[User] ON
INSERT INTO dbo.[User] (UserId, Email, PasswordHash, PasswordSalt) VALUES (957137, 'z48597345@domain.com', 'hash', 'salt');
SET IDENTITY_INSERT dbo.[User] OFF

SET IDENTITY_INSERT Banking.[Account] ON
INSERT INTO Banking.[Account] (AccountId, CurrencyId, AllowNegative, [Type]) VALUES (934532, 'USD', 0, 'Current');
INSERT INTO Banking.[Account] (AccountId, CurrencyId, AllowNegative, [Type]) VALUES (934533, 'USD', 0, 'Current');

SET IDENTITY_INSERT Banking.[Account] OFF

</value>
  </data>
  <data name="FailsWithUnknownDestAccount_PretestAction.SqlScript" xml:space="preserve">
    <value>SET IDENTITY_INSERT dbo.[User] ON
INSERT INTO dbo.[User] (UserId, Email, PasswordHash, PasswordSalt) VALUES (3001, 'z485p9s5@domain.com', 'hash', 'salt');
SET IDENTITY_INSERT dbo.[User] OFF

SET IDENTITY_INSERT Banking.[Account] ON
INSERT INTO Banking.[Account] (AccountId, CurrencyId, AllowNegative, [Type]) VALUES (3002, 'USD', 1, 'Current');
INSERT INTO Banking.[Account] (AccountId, CurrencyId, AllowNegative, [Type]) VALUES (3003, 'USD', 1, 'Current');

SET IDENTITY_INSERT Banking.[Account] OFF

</value>
  </data>
  <data name="FailsWithUnknownSourceAccount_PretestAction.SqlScript" xml:space="preserve">
    <value>SET IDENTITY_INSERT dbo.[User] ON
INSERT INTO dbo.[User] (UserId, Email, PasswordHash, PasswordSalt) VALUES (3001, 'z485p9s5@domain.com', 'hash', 'salt');
SET IDENTITY_INSERT dbo.[User] OFF

SET IDENTITY_INSERT Banking.[Account] ON
INSERT INTO Banking.[Account] (AccountId, CurrencyId, AllowNegative, [Type]) VALUES (3002, 'USD', 1, 'Current');
INSERT INTO Banking.[Account] (AccountId, CurrencyId, AllowNegative, [Type]) VALUES (3003, 'USD', 1, 'Current');

SET IDENTITY_INSERT Banking.[Account] OFF

</value>
  </data>
  <data name="Success_PretestAction.SqlScript" xml:space="preserve">
    <value>SET IDENTITY_INSERT dbo.[User] ON
INSERT INTO dbo.[User] (UserId, Email, PasswordHash, PasswordSalt) VALUES (817315, 'z485Pp9s5@domain.com', 'hash', 'salt');
SET IDENTITY_INSERT dbo.[User] OFF

SET IDENTITY_INSERT Banking.[Account] ON
INSERT INTO Banking.[Account] (AccountId, CurrencyId, AllowNegative, [Type]) VALUES (1342532, 'USD', 1, 'Current');
INSERT INTO Banking.[Account] (AccountId, CurrencyId, AllowNegative, [Type]) VALUES (1342533, 'USD', 1, 'Current');

SET IDENTITY_INSERT Banking.[Account] OFF

</value>
  </data>
  <data name="FailsWithUnknownSourceAccount_PosttestAction.SqlScript" xml:space="preserve">
    <value>DELETE FROM dbo.[User] WHERE UserId = 3001;

DELETE FROM Banking.Account WHERE AccountId &gt;= 3002 AND AccountId &lt;= 3003;
</value>
  </data>
  <data name="FailsWithUnknownDestAccount_PosttestAction.SqlScript" xml:space="preserve">
    <value>DELETE FROM dbo.[User] WHERE UserId = 3001;

DELETE FROM Banking.Account WHERE AccountId &gt;= 3002 AND AccountId &lt;= 3003;
</value>
  </data>
  <data name="FailsWithNullSourceAccountId_TestAction.SqlScript" xml:space="preserve">
    <value>BEGIN TRAN

BEGIN TRY
	DECLARE @TransferId BIGINT
	EXEC Banking.CreateTransfer NULL, 1, '', 1, @TransferId OUTPUT
END TRY
BEGIN CATCH
	IF ERROR_NUMBER() = 51003
		SELECT 0
END CATCH

ROLLBACK TRAN
</value>
  </data>
  <data name="FailsWithDifferentAccountCurrencies_PosttestAction.SqlScript" xml:space="preserve">
    <value>DELETE FROM dbo.[User] WHERE UserId = 3001;

DELETE FROM Banking.[Account] WHERE AccountId &gt;= 3002 AND AccountId &lt;= 3003;
</value>
  </data>
  <metadata name="$this.Localizable" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>