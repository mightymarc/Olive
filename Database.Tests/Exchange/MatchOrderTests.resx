<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SuccessTest1_PretestAction.SqlScript" xml:space="preserve">
    <value>-- Create accounts.
SET IDENTITY_INSERT Banking.Account ON;

INSERT INTO Banking.Account (AccountId, [Type], CurrencyId)
	VALUES (40001, 'Current', 'EXU');

INSERT INTO Banking.Account (AccountId, [Type], CurrencyId)
	VALUES (40002, 'Current', 'CAP');

INSERT INTO Banking.Account (AccountId, [Type], CurrencyId)
	VALUES (40003, 'Current', 'EXU');

INSERT INTO Banking.Account (AccountId, [Type], CurrencyId)
	VALUES (40004, 'Current', 'CAP');

SET IDENTITY_INSERT Banking.Account OFF;

DECLARE @Volume1 DECIMAL(18, 4) = 15;
DECLARE @Volume2 DECIMAL(18, 4) = 100;
DECLARE @Price1 DECIMAL(18, 4) = 14.123;
DECLARE @Price2 DECIMAL(18, 4) = 0.0715;

-- Create account holds.
SET IDENTITY_INSERT Banking.AccountHold ON;

INSERT INTO Banking.AccountHold (AccountHoldId, AccountId, Amount, Reason)
	VALUES (30001, 40001, @Volume1, 'For order 1');

INSERT INTO Banking.AccountHold (AccountHoldId, AccountId, Amount, Reason)
	VALUES (30002, 40003, @Volume2, 'For order 2');

SET IDENTITY_INSERT Banking.AccountHold OFF;

-- Create orders.
SET IDENTITY_INSERT Exchange.[Order] ON;

INSERT INTO Exchange.[Order] (OrderId, SourceAccountId, DestAccountId, Volume, Price, AccountHoldId)
	VALUES (20001, 40001, 40002, @Volume1, @Price1, 30001);

INSERT INTO Exchange.[Order] (OrderId, SourceAccountId, DestAccountId, Volume, Price, AccountHoldId)
	VALUES (20002, 40004, 40003, @Volume2, @Price2, 30002);

SET IDENTITY_INSERT Exchange.[Order] OFF;

SELECT 0;
</value>
  </data>
  <data name="SuccessTest1_TestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @RC INT;

EXEC @RC = Exchange.MatchOrder 2002;

IF @RC &lt;&gt; 0
BEGIN
	SELECT 'MatchOrder returned ' + CONVERT(VARCHAR, @RC);
	RETURN;
END

SELECT 0;
</value>
  </data>
  <data name="SuccessTest1_PosttestAction.SqlScript" xml:space="preserve">
    <value>DECLARE @Volume1 DECIMAL(18, 4) = 15;
DECLARE @Volume2 DECIMAL(18, 4) = 100;
DECLARE @Price1 DECIMAL(18, 4) = 14.123;
DECLARE @Price2 DECIMAL(18, 4) = 0.0715;

-- Verify that the first hold doesn't exist.
IF (SELECT COUNT(*) FROM Banking.AccountHold WHERE AccountHoldId = 20001) &lt;&gt; 0
BEGIN
	SELECT 'First hold found.';
	RETURN;
END

-- Verify that the first order volume is zero.
DECLARE @ActualOrderVolume1 DECIMAL(18, 4) = (SELECT Volume FROM Exchange.[Order] WHERE OrderId = 20001);
DECLARE @ExpectedOrderVolume1 DECIMAL(18, 4) = 0;

IF @ExpectedOrderVolume1 &lt;&gt; @ActualOrderVolume1 
BEGIN
	SELECT CONVERT(VARCHAR, @ExpectedOrderVolume1) + ' &lt;&gt; ' + CONVERT(VARCHAR, @ActualOrderVolume1);
	RETURN;
END

DECLARE @ExpectedHoldAmount1 DECIMAL(18, 4) = 0;
DECLARE @ActualHoldAmount1 DECIMAL(18, 4) = (SELECT Amount FROM Banking.AccountHold WHERE AccountHoldId = 20001);

IF @ActualHoldAmount1 &lt;&gt; @ExpectedHoldAmount1
BEGIN
	SELECT '@ExpectedHoldAmount1 ' + CONVERT(VARCHAR, @ExpectedHoldAmount1) + ' &lt;&gt; @ActualHoldAmount1 ' + CONVERT(VARCHAR, @ActualHoldAmount1);
	RETURN;
END

DECLARE @ExpectedHoldReason1 DECIMAL(18, 4) = @Volume1;
DECLARE @ActualHoldReason1 DECIMAL(18, 4) = (SELECT Reason FROM Banking.AccountHold WHERE AccountHoldId = 20001);

IF @ActualHoldReason1 &lt;&gt; @ExpectedHoldReason1
BEGIN
	SELECT '@ExpectedHoldReason1 ' + CONVERT(VARCHAR, @ExpectedHoldReason1) + ' &lt;&gt; @ActualHoldReason1 ' + CONVERT(VARCHAR, @ActualHoldReason1);
	RETURN;
END

IF (SELECT COUNT(*) FROM Banking.AccountHold WHERE
	AccountHoldId = 20002 AND
	Amount = @Volume2 AND
	ABS(DATEDIFF(second, GETUTCDATE(), CreatedAt)) &lt; 5 AND
	Reason = 'For order 2' AND
	ExpiresAt IS NULL) &lt;&gt; 1
BEGIN
	SELECT 'Second hold not found'
	RETURN
END

IF (SELECT COUNT(*) FROM Banking.[Order] WHERE
	OrderId = 20001 AND
	Volume = 0 AND
	Price = @Price1 AND
	ABS(DATEDIFF(second, GETUTCDATE(), CreatedAt)) &lt; 5 AND
	AccountHoldId = 30001 AND
	SourceAccountId = 40001 AND
	DestAccountId = 40002) &lt;&gt; 1
BEGIN
	SELECT 'First order not found';
	RETURN;
END

IF (SELECT COUNT(*) FROM Banking.[Order] WHERE
	OrderId = 20002 AND
	Volume = @Volume2 - @Volume1 * @Price1 AND
	Price = @Price1 AND
	ABS(DATEDIFF(second, GETUTCDATE(), CreatedAt)) &lt; 5 AND
	AccountHoldId = 30002 AND
	SourceAccountId = 40004 AND
	DestAccountId = 40003) &lt;&gt; 1
BEGIN
	SELECT 'Second order not found';
	RETURN;
END

IF (SELECT COUNT(*) FROM Banking.OrderMatch WHERE
	OrderMatchId &gt; 0 AND
	ABS(DATEDIFF(second, GETUTCDATE(), CreatedAt)) &lt; 5 AND
	LeftOrderId = 20001 AND
	RightOrderId = 20002 AND
	Volume = @Volume1) = 0
BEGIN
	SELECT 'Order match not found';
	RETURN;
END

SELECT 0;


</value>
  </data>
  <metadata name="$this.Localizable" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>